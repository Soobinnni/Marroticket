package com.marroticket.umember.member.controller;

import com.marroticket.common.email.service.EmailService;
import com.marroticket.common.email.vo.EmailVO;

import java.security.SecureRandom;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import com.marroticket.umember.member.domain.UmemberVO;
import com.marroticket.umember.member.service.UmemberService;

import lombok.extern.slf4j.Slf4j;

@Controller
@RequestMapping("/umember")
@Slf4j
public class UmemberController {
	@Autowired
	private UmemberService umemberService;
	@Autowired
	private EmailService emailService;

// 아이디 찾기
	@PostMapping("/findId")
	public ResponseEntity<String> findId(@RequestBody UmemberVO umember) throws Exception {

		// 값이 정상적으로 입력됐을 때
		String uId = umemberService.findId(umember);

		// 응답
		if (uId != null && uId.length() > 0) {
			return new ResponseEntity<String>(uId, HttpStatus.OK);
		} else {
			return new ResponseEntity<String>("fail", HttpStatus.OK);
		}
	}

	// 비밀번호 찾기 - 임시비밀번호 업데이트
	@PostMapping("/findPassword")
	public ResponseEntity<String> findPassword(@RequestBody UmemberVO umember) throws Exception {
		ResponseEntity<String> entity;

		// 임시비밀번호 생성(15자리)
		String temporaryPassword = getRamdomPassword(15);
		umember.setUPassword(temporaryPassword, umember.getuEmail());

		// 임시비밀번호로 업데이트 : 업데이트는 where조건(id, email이 db데이터 조회 시, 부합)에 따라 성공/실패
		int success = umemberService.passwordUpdate(umember);

		if (success != 0) { // 업데이트 성공
			temporaryPasswordSendEmail(temporaryPassword); //임시비밀번호 발송
			entity = new ResponseEntity<String>(temporaryPassword, HttpStatus.OK);
			// 임시비밀번호 이메일 발송
		} else { // 업데이트 실패
			entity = new ResponseEntity<String>("fail", HttpStatus.OK);
		}
		return entity;
	}

	public String getRamdomPassword(int size) { // 랜덤한 임시비밀번호 생성
		char[] charSet = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F',
				'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a',
				'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
				'w', 'x', 'y', 'z', '!', '@', '#', '$', '%', '^', '&' };

		StringBuffer sb = new StringBuffer();
		SecureRandom sr = new SecureRandom();
		sr.setSeed(new Date().getTime());

		int idx = 0;
		int len = charSet.length;
		for (int i = 0; i < size; i++) {
			// idx = (int) (len * Math.random());
			idx = sr.nextInt(len); // 강력한 난수를 발생시키기 위해 SecureRandom을 사용한다.
			sb.append(charSet[idx]);
		}

		return sb.toString();
	}

		// 임시비밀번호 이메일 발송
		public void temporaryPasswordSendEmail(String temporaryPassword, String uEmail) throws Exception {
			EmailVO email;
			String upassword = umemberService.findPassword(umember);
			String content = "귀하의 비밀번호는 '" + temporaryPassword + "' 입니다.";
			String title = "마로티켓입니다. 비밀번호를 확인해주세요";
			email.setAddress(umember.getuEmail());
			email.setContent(content);
			email.setTitle(title);
			emailService.sendSimpleMessage(email);
			System.out.println("findPasswordSendEmail : " + password);
			model.addAttribute("password", password);
			return "redirect:/";
	
			return null;
	}

	// 마이페이지
	/* 1) 일반 회원 정보 */
	@GetMapping("/umembermypage")
	public String umemberInfo() {
		return "mypage.umemberInfo"; // 일반 회원의 마이페이지 default 페이지
	}

	/* 2) 일반회원 예매 정보 */
	@GetMapping("/umemberReserveInfo")
	public String umemberReserveInfo() {
		return "mypage.umemberReserveInfo";
	}

	/* 3) 일반 회원 예매 취소 정보 */
	@GetMapping("/umemberCancelInfo")
	public String umemberCancelInfo() {
		return "mypage.umemberCancelInfo";
	}

	// 일반회원 가입 이용약관
	@GetMapping("/umemberAgreement")
	public String umemberAgreement() {
		System.out.println("umemberAgreement 호출 완료");
		return "uMemberJoin.umemberAgreement";
	}

	// 일반 회원가입 페이지
	@GetMapping("/umemberJoinForm")
	public String umemberJoinForm() {
		System.out.println("umemberJoinForm 호출 완료");
		return "uMemberJoin.umemberJoinForm";
	}

	// 일반 사용자 아이디 중복 체크

	// 스프링 시큐리티의 비밀번호 암호처리기
//			@Autowired
//			private PasswordEncoder passwordEncoder;

}
