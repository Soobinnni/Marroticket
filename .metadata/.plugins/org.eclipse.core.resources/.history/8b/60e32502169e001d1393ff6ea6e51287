package com.marroticket.tmember.member.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import com.marroticket.common.email.vo.EmailVO;
import com.marroticket.tmember.member.service.TmemberService;
import com.marroticket.tmember.member.vo.TmemberVO;

@Controller
@RequestMapping("/theater")
public class TmemberController {
	
	@Autowired
	TmemberService tmemberService;
	
	@GetMapping("")
	public String home() {
		return "tmemberhome";
	}

	// 연극 등록
	@GetMapping("/registePlay")
	public String registePlay() {
		return "registe.registeAgree";
	}

	// 등록한 연극
	@GetMapping("/playRegisteInfo")
	public String playRegisteInfo() {
		return "info.tMemberPlayRegisteInfo";
	}

	// 극단 정산
	@GetMapping("/tmemberPayment")
	public String theaterPayment() {
		return "info.tMemberPayment";
	}

	// 극단 정보 관리
	@GetMapping("/tmembermypage")
	public String theaterMemberInfo() {
		return "info.tMemberMemberInfo";
	}


	// 극단 이용약관 페이지
	@GetMapping("/tMemberAgreement")
	public String tMemberAgreement() {
		System.out.println("tMemberAgreement 호출 완료");
		return "tMemberJoin.tMemberAgreement";
	}
	// 극단 회원 가입 페이지
	@GetMapping("/tMemberJoinForm")
	public String tMemberJoinForm() {
		System.out.println("tMemberJoinForm 호출 완료");
		return "tMemberJoin.tMemberJoinForm";
	}
	
	// 극단 공지사항, faq

	//극단회원 FAQ 
	// 목록
	@GetMapping("/tfaqList")
	public String tfaqList() {
		return "tserviceCenter.tfaqList";
	}
	// 극단회원 Notice
	// 목록
	@GetMapping("/noticeList")
	public String noticeList() {
		return "tserviceCenter.notice";
	}
	//footer 
	@GetMapping("/privacy")
	public String privacy() {
		return "tmember.footer.privacy";
	}
	@GetMapping("/companyinfo")
	public String companyinfo() {
		return "tmember.footer.companyinfo";
	}
	@GetMapping("/termsofuse")
	public String termsofuse() {
		return "tmember.footer.termsofuse";
	}
	
	//극단회원 아이디 찾기
	@PostMapping("/findId")
	public ResponseEntity<String> findId(@RequestBody TmemberVO tmember) throws Exception {
		// 값이 정상적으로 입력됐을 때, db 조회
		String tId = tmemberService.findId(tmember);

		// 응답
		if (tId != null && tId.length() > 0) {
			//idSendEmail((tId+"아이디",) tmember.getuEmail()); // 아이디 이메일 발송
			return new ResponseEntity<String>(tId, HttpStatus.OK);
		} else {
			return new ResponseEntity<String>("fail", HttpStatus.OK);
		}
	}
	
	// 아이디 이메일 발송
	public void temporaryPasswordSendEmail(String idOrTemporaryPassword, String tOwnerEmail) throws Exception {
		String title = null;
		EmailVO email = new EmailVO(); // 이메일 객체
		
		if (idOrTemporaryPassword.substring(idOrTemporaryPassword.length()-3, idOrTemporaryPassword.length()).equals("아이디")) {
			//문자열 끝자리가 '아이디'일때
			title = "마로티켓입니다. 아이디를 확인해주세요"; // 이메일 제목
		} else {
			title = "마로티켓입니다. 임시비밀번호를 확인해주세요"; // 이메일 제목
			email.setPassword(idOrTemporaryPassword);
		}
		
		// set
		email.setAddress(tOwnerEmail);
		email.setTitle(title);

		// 이메일 발송
		emailService.sendSimpleMessage(email);
		// console 확인
		System.out.println("findPasswordSendEmail : " + temporaryPassword + " 임시이메일 발송 완료");
	}

}
