package com.marroticket.tmember.registe.service;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import com.marroticket.common.util.domain.FileStorageException;
import com.marroticket.mapper.RegisteMapper;
import com.marroticket.umember.play.domain.PlayVO;

@Service
public class RegisteServiceimpl implements RegisteService {

	@Value("${app.upload.dir:${C:/SpringBootProject/file}}")
	private String uploadDir;

	@Autowired
	RegisteMapper registeMapper;

	@Override
	public void registePlay(PlayVO playVO, MultipartFile files1, MultipartFile files2) throws Exception {
		// File.seperator 는 OS종속적이다.
		// Spring에서 제공하는 cleanPath()를 통해서 ../ 내부 점들에 대해서 사용을 억제한다
		Path copyOfLocation1 = Paths.get(uploadDir + File.separator + StringUtils.cleanPath(files1.getOriginalFilename()));
		Path copyOfLocation2 = Paths.get(uploadDir + File.separator + StringUtils.cleanPath(files2.getOriginalFilename()));

		String Url = uploadDir;
		playVO.setPtheaterMapUrl(Url);
		playVO.setPposterFileName(Url);
		playVO.setPtheaterMapOriginalName(files1.getOriginalFilename());
		playVO.setPposterOriginalName(files2.getOriginalFilename());
		try {
			// inputStream을 가져와서
			// copyOfLocation (저장위치)로 파일을 쓴다.
			// copy의 옵션은 기존에 존재하면 REPLACE(대체한다), 오버라이딩 한다
			Files.copy(files1.getInputStream(), copyOfLocation1, StandardCopyOption.REPLACE_EXISTING);
		} catch (IOException e) {
			e.printStackTrace();
			throw new FileStorageException("Could not store file : " + files1.getOriginalFilename());
		}
		try {
			Files.copy(files2.getInputStream(), copyOfLocation2, StandardCopyOption.REPLACE_EXISTING);
		} catch (IOException e) {
			e.printStackTrace();
			throw new FileStorageException("Could not store file : " + files2.getOriginalFilename());
		}

		registeMapper.registe(playVO);

	}

}
