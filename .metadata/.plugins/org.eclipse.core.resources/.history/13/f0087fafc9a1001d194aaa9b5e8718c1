package com.marroticket.common.util.Service;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

import org.apache.commons.io.FilenameUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import com.marroticket.common.util.Repository.FileRepository;
import com.marroticket.common.util.domain.FileStorageException;
import com.marroticket.umember.play.domain.PlayVO;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class FileService {
	private final Environment env;
	private final Path fileLocation;
	private final FileRepository fileRepository;

	@Autowired
	public FileService(Environment env, FileRepository fileRepository) {
		this.env = env;
		this.fileLocation = Paths.get(env.getProperty("C:/SpringBootProject/file")).toAbsolutePath().normalize();
		this.fileRepository = fileRepository;
		try {
			Files.createDirectories(this.fileLocation);
		} catch (Exception ex) {
			throw new FileStorageException("Could not create the directory where the uploaded files will be stored.",
					ex);
		}
	}

	public String storeFile(MultipartFile file) {
		String fileName = StringUtils.cleanPath(file.getOriginalFilename());

		try {
			if (fileName.contains("..")) {
				throw new FileStorageException("Sorry! Filename contains invalid path sequence " + fileName);
			}

			Path targetLocation = this.fileLocation.resolve(fileName);
			Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);
			File fileEntity = File.builder().ptheaterMapFileName(ptheaterMapFileName.randomptheaterMapFileName().toString()).fileSize(file.getSize())
					.filePath(targetLocation.toString()).realName(FilenameUtils.removeExtension(fileName))
					.extension(FilenameUtils.getExtension(fileName)).build();

			fileRepository.save(fileEntity);
			return fileName;
		} catch (IOException ex) {
			throw new FileStorageException("Could not store file " + fileName + ". Please try again!", ex);
		}
	}
}
